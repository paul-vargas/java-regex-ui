/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.paulvargas.tools.regex;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ResourceBundle;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mxds
 */
public class MainFrame extends javax.swing.JFrame implements CaretListener, ItemListener {

    private Pattern pattern;
    private int flags;
    private DefaultTableModel groupModel = new DefaultTableModel();
    private DefaultTableModel dummyGroupModel = new DefaultTableModel();
    private DefaultTableModel splitModel = new DefaultTableModel();
    private DefaultTableModel dummySplitModel = new DefaultTableModel();

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        groupModel.addColumn("n");
        groupModel.addColumn("start");
        groupModel.addColumn("end");
        groupModel.addColumn("group");
        splitModel.addColumn("index");
        splitModel.addColumn("value");
        groupsTable.setModel(dummyGroupModel);
        splitTable.setModel(dummySplitModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new ButtonGroup();
        jLabel1 = new JLabel();
        regexTextField = new JTextField();
        unixLinesCheckBox = new JCheckBox();
        caseInsensitiveCheckBox = new JCheckBox();
        commentsCheckBox = new JCheckBox();
        multilineCheckBox = new JCheckBox();
        literalCheckBox = new JCheckBox();
        dotallCheckBox = new JCheckBox();
        unicodeCaseCheckBox = new JCheckBox();
        canonEqCheckBox = new JCheckBox();
        unicodeCharacterClassCheckBox = new JCheckBox();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jScrollPane1 = new JScrollPane();
        inputTextArea = new JTextArea();
        jTabbedPane1 = new JTabbedPane();
        jPanel1 = new JPanel();
        jScrollPane2 = new JScrollPane();
        groupsTable = new JTable();
        jPanel2 = new JPanel();
        jScrollPane4 = new JScrollPane();
        splitTable = new JTable();
        jPanel3 = new JPanel();
        jLabel5 = new JLabel();
        replacementTextField = new JTextField();
        replaceFirstRadioButton = new JRadioButton();
        replaceAllRadioButton = new JRadioButton();
        jLabel6 = new JLabel();
        jScrollPane3 = new JScrollPane();
        resultTextArea = new JTextArea();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        ResourceBundle bundle = ResourceBundle.getBundle("org/paulvargas/tools/regex/Bundle"); // NOI18N
        setTitle(bundle.getString("MainFrame.title")); // NOI18N

        jLabel1.setText(bundle.getString("MainFrame.jLabel1.text")); // NOI18N

        regexTextField.setFont(new Font("Monospaced", 1, 14)); // NOI18N
        regexTextField.setText(bundle.getString("MainFrame.regexTextField.text")); // NOI18N
        regexTextField.addCaretListener(this);

        unixLinesCheckBox.setText(bundle.getString("MainFrame.unixLinesCheckBox.text")); // NOI18N
        unixLinesCheckBox.addItemListener(this);

        caseInsensitiveCheckBox.setText(bundle.getString("MainFrame.caseInsensitiveCheckBox.text")); // NOI18N
        caseInsensitiveCheckBox.addItemListener(this);

        commentsCheckBox.setText(bundle.getString("MainFrame.commentsCheckBox.text")); // NOI18N
        commentsCheckBox.addItemListener(this);

        multilineCheckBox.setText(bundle.getString("MainFrame.multilineCheckBox.text")); // NOI18N
        multilineCheckBox.addItemListener(this);

        literalCheckBox.setText(bundle.getString("MainFrame.literalCheckBox.text")); // NOI18N
        literalCheckBox.addItemListener(this);

        dotallCheckBox.setText(bundle.getString("MainFrame.dotallCheckBox.text")); // NOI18N
        dotallCheckBox.addItemListener(this);

        unicodeCaseCheckBox.setText(bundle.getString("MainFrame.unicodeCaseCheckBox.text")); // NOI18N
        unicodeCaseCheckBox.addItemListener(this);

        canonEqCheckBox.setText(bundle.getString("MainFrame.canonEqCheckBox.text")); // NOI18N
        canonEqCheckBox.addItemListener(this);

        unicodeCharacterClassCheckBox.setText(bundle.getString("MainFrame.unicodeCharacterClassCheckBox.text")); // NOI18N
        unicodeCharacterClassCheckBox.addItemListener(this);

        jLabel2.setText(bundle.getString("MainFrame.jLabel2.text")); // NOI18N

        jLabel3.setText(bundle.getString("MainFrame.jLabel3.text")); // NOI18N

        inputTextArea.setColumns(20);
        inputTextArea.setFont(new Font("Monospaced", 1, 14)); // NOI18N
        inputTextArea.setRows(2);
        inputTextArea.addCaretListener(this);
        jScrollPane1.setViewportView(inputTextArea);

        groupsTable.setModel(new DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        groupsTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        groupsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(groupsTable);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("MainFrame.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        splitTable.setModel(new DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(splitTable);

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("MainFrame.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jLabel5.setText(bundle.getString("MainFrame.jLabel5.text")); // NOI18N

        replacementTextField.setFont(new Font("Monospaced", 1, 14)); // NOI18N
        replacementTextField.setText(bundle.getString("MainFrame.replacementTextField.text")); // NOI18N
        replacementTextField.addCaretListener(this);

        buttonGroup1.add(replaceFirstRadioButton);
        replaceFirstRadioButton.setSelected(true);
        replaceFirstRadioButton.setText(bundle.getString("MainFrame.replaceFirstRadioButton.text")); // NOI18N

        buttonGroup1.add(replaceAllRadioButton);
        replaceAllRadioButton.setText(bundle.getString("MainFrame.replaceAllRadioButton.text")); // NOI18N

        jLabel6.setText(bundle.getString("MainFrame.jLabel6.text")); // NOI18N

        resultTextArea.setEditable(false);
        resultTextArea.setColumns(20);
        resultTextArea.setFont(new Font("Monospaced", 1, 14)); // NOI18N
        resultTextArea.setRows(2);
        jScrollPane3.setViewportView(resultTextArea);

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(replacementTextField)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(replaceFirstRadioButton)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(replaceAllRadioButton))
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(replacementTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(replaceFirstRadioButton)
                    .addComponent(replaceAllRadioButton))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("MainFrame.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(unixLinesCheckBox)
                            .addComponent(multilineCheckBox)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(unicodeCaseCheckBox)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(literalCheckBox)
                                    .addComponent(canonEqCheckBox)
                                    .addComponent(caseInsensitiveCheckBox))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(dotallCheckBox)
                                    .addComponent(commentsCheckBox)
                                    .addComponent(unicodeCharacterClassCheckBox)))
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 56, Short.MAX_VALUE))
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(regexTextField, GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane1, GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(regexTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(unixLinesCheckBox)
                    .addComponent(caseInsensitiveCheckBox)
                    .addComponent(commentsCheckBox))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(literalCheckBox)
                    .addComponent(dotallCheckBox)
                    .addComponent(multilineCheckBox))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(unicodeCharacterClassCheckBox)
                    .addComponent(canonEqCheckBox)
                    .addComponent(unicodeCaseCheckBox))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }

    // Code for dispatching events from components to event handlers.

    public void itemStateChanged(ItemEvent evt) {
        if (evt.getSource() == unixLinesCheckBox) {
            MainFrame.this.unixLinesCheckBoxItemStateChanged(evt);
        }
        else if (evt.getSource() == caseInsensitiveCheckBox) {
            MainFrame.this.caseInsensitiveCheckBoxItemStateChanged(evt);
        }
        else if (evt.getSource() == commentsCheckBox) {
            MainFrame.this.commentsCheckBoxItemStateChanged(evt);
        }
        else if (evt.getSource() == multilineCheckBox) {
            MainFrame.this.multilineCheckBoxItemStateChanged(evt);
        }
        else if (evt.getSource() == literalCheckBox) {
            MainFrame.this.literalCheckBoxItemStateChanged(evt);
        }
        else if (evt.getSource() == dotallCheckBox) {
            MainFrame.this.dotallCheckBoxItemStateChanged(evt);
        }
        else if (evt.getSource() == unicodeCaseCheckBox) {
            MainFrame.this.unicodeCaseCheckBoxItemStateChanged(evt);
        }
        else if (evt.getSource() == canonEqCheckBox) {
            MainFrame.this.canonEqCheckBoxItemStateChanged(evt);
        }
        else if (evt.getSource() == unicodeCharacterClassCheckBox) {
            MainFrame.this.unicodeCharacterClassCheckBoxItemStateChanged(evt);
        }
    }

    public void caretUpdate(CaretEvent evt) {
        if (evt.getSource() == inputTextArea) {
            MainFrame.this.inputTextAreaCaretUpdate(evt);
        }
        else if (evt.getSource() == regexTextField) {
            MainFrame.this.regexTextFieldCaretUpdate(evt);
        }
        else if (evt.getSource() == replacementTextField) {
            MainFrame.this.replacementTextFieldCaretUpdate(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void inputTextAreaCaretUpdate(CaretEvent evt) {//GEN-FIRST:event_inputTextAreaCaretUpdate
        updateGroups();
        updateSplit();
        updateReplace();
    }//GEN-LAST:event_inputTextAreaCaretUpdate

    private void regexTextFieldCaretUpdate(CaretEvent evt) {//GEN-FIRST:event_regexTextFieldCaretUpdate
        compileRegex();
    }//GEN-LAST:event_regexTextFieldCaretUpdate

    private void replacementTextFieldCaretUpdate(CaretEvent evt) {//GEN-FIRST:event_replacementTextFieldCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_replacementTextFieldCaretUpdate

    private void unixLinesCheckBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_unixLinesCheckBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_unixLinesCheckBoxItemStateChanged

    private void caseInsensitiveCheckBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_caseInsensitiveCheckBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_caseInsensitiveCheckBoxItemStateChanged

    private void commentsCheckBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_commentsCheckBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_commentsCheckBoxItemStateChanged

    private void multilineCheckBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_multilineCheckBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_multilineCheckBoxItemStateChanged

    private void literalCheckBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_literalCheckBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_literalCheckBoxItemStateChanged

    private void dotallCheckBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_dotallCheckBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_dotallCheckBoxItemStateChanged

    private void unicodeCaseCheckBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_unicodeCaseCheckBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_unicodeCaseCheckBoxItemStateChanged

    private void canonEqCheckBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_canonEqCheckBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_canonEqCheckBoxItemStateChanged

    private void unicodeCharacterClassCheckBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_unicodeCharacterClassCheckBoxItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_unicodeCharacterClassCheckBoxItemStateChanged

    private void compileRegex() {
        try {
            pattern = Pattern.compile(regexTextField.getText());
            regexTextField.setForeground(new Color(0, 0, 153));
            regexTextField.setBackground(Color.WHITE);
            updateGroups();
            updateSplit();
            updateReplace();
        } catch (Exception e) {
            regexTextField.setForeground(Color.RED);
            regexTextField.setBackground(new Color(255, 230, 230));
        }
    }

    private void updateGroups() {
        groupModel.setRowCount(0);
        Matcher matcher = this.pattern.matcher(inputTextArea.getText());
        for (int n = 0; matcher.find(); n++) {
            Vector<String> rowData = new Vector<String>(4);
            rowData.add(String.valueOf(n));
            rowData.add(String.valueOf(matcher.start()));
            rowData.add(String.valueOf(matcher.end()));
            String group = matcher.group();
            if (group == null) {
                rowData.add("<null>");
            } else if (group.isEmpty()) {
                rowData.add("<empty>");
            } else {
                rowData.add(group);
            }
            groupModel.addRow(rowData);
        }
        groupsTable.setModel(groupModel);
    }
    
    private void updateSplit() {
        splitModel.setRowCount(0);
        String[] array = inputTextArea.getText().split(regexTextField.getText());
        for (int index = 0; index < array.length; index++) {
            Vector<String> rowData = new Vector<String>(4);
            rowData.add(String.valueOf(index));
            String value = array[index];
            if (value == null) {
                rowData.add("<null>");
            } else if (value.isEmpty()) {
                rowData.add("<empty>");
            } else {
                rowData.add(value);
            }
            splitModel.addRow(rowData);
        }
        splitTable.setModel(splitModel);
    }
    
    private void updateReplace() {
        
    }

      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ButtonGroup buttonGroup1;
    private JCheckBox canonEqCheckBox;
    private JCheckBox caseInsensitiveCheckBox;
    private JCheckBox commentsCheckBox;
    private JCheckBox dotallCheckBox;
    private JTable groupsTable;
    private JTextArea inputTextArea;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JScrollPane jScrollPane4;
    private JTabbedPane jTabbedPane1;
    private JCheckBox literalCheckBox;
    private JCheckBox multilineCheckBox;
    private JTextField regexTextField;
    private JRadioButton replaceAllRadioButton;
    private JRadioButton replaceFirstRadioButton;
    private JTextField replacementTextField;
    private JTextArea resultTextArea;
    private JTable splitTable;
    private JCheckBox unicodeCaseCheckBox;
    private JCheckBox unicodeCharacterClassCheckBox;
    private JCheckBox unixLinesCheckBox;
    // End of variables declaration//GEN-END:variables
}
